# -*- coding: utf-8 -*-
"""LVADSUSR180_Riddhi Bhowmick_FA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X21UMppucGlviWmYO7Uw0usx86dFlQ5H
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df=pd.read_csv(r'/content/drive/MyDrive/dataset/final_assessment_data/Final Dataset - IPL.csv')

df.head()

df.shape

df.isnull().sum().sum()

# 1 calculating rows,cols
print("rows:",df.shape[0])
print("columns:",df.shape[1])
print("types of data:")
print(df.dtypes)
print("______")
print("numerical_columns:",df.select_dtypes(include='number').columns.tolist())
print("categorical_columns",df.select_dtypes(exclude='number').columns.tolist())

# 2.a.checking the presence of null values.
print(df.isnull().sum())

print("total null values: ",df.isnull().sum().sum())

#2.b checking duplicate values
print(df.duplicated().sum())

"""Answer 2:(a). since there is no null value in the dataset, so we do not need to fill any null data or drop any any rows.
(b) there is no also no duplicate data present in the data. So the datasets integrity is already ensured.
"""

print(df.describe().T)

numerical_cols=df.select_dtypes(include='number').columns.tolist()
categorical_cols=df.select_dtypes(exclude='number').columns.tolist()

numerical_cols.remove('match_id')

#3 # 3 finding mean,median,percentile(25%,50%,75%),min,max , mode
print(df.describe().T)
print("_______")
print("mode:")
print("_______")
for i in numerical_cols+categorical_cols:
  print(f"mode for {i}",df[i].mode())
  print("_________")
print("median:")
print("_______")
for i in numerical_cols:
  print(f"mode for {i}",df[i].median())
  print("_________")

"""3 found the statistical data like mean std,max range using descibe function and calculated mode,median"""

# q4 vissualization
# sns.heatmap(df.corr(),annot=True)

df1=df.copy()

df.columns

df.drop(['match_id', 'date'],axis=1,inplace=True)

df.head()

df.team1.value_counts().index

teams=df1.match_winner.unique().tolist()
number=[x for x in range(len(teams))]
my_dict=dict(zip(teams,number))





my_dict



df['team1'].map(my_dict)

df['team1']=df['team1'].map(my_dict)
df['team2']=df['team2'].map(my_dict)
df['toss_winner']=df['toss_winner'].map(my_dict)
df['match_winner']=df['match_winner'].map(my_dict)

df.head()

df=df1.copy()

df.drop(['match_id','stage'],axis=1,inplace=True)

df['team1']=df['team1'].map(my_dict)

df['team2']=df['team2'].map(my_dict)
df['toss_winner']=df['toss_winner'].map(my_dict)
df['match_winner']=df['match_winner'].map(my_dict)

df.isnull().sum().sum()

df.head()

df['toss_decision'].value_counts()

df['won_by'].value_counts()

win_map={'Wickets':0,'Runs':1}
df['won_by']=df['won_by'].map(win_map)

toss_map={'Field':0,"Bat":1}
df['toss_decision']=df['toss_decision'].map(toss_map)

num_cols=df.select_dtypes(include='number').columns.tolist()

# 4 visualization
plt.figure(figsize=(10,5))
sns.heatmap(df[num_cols].corr(),annot=True)
plt.show()

"""correlation between various numerical columns, the more towards red the more +ve correlated the more towards black the more -ve correlated."""

plt.figure(figsize=(10,5))
sns.countplot(data=df1,x='match_winner')
plt.show()

"""gujrat won the most matches
while chennai and mumbai won few matches
"""

df1['toss_winner'].plot.pie()

plt.figure(figsize=(10,5))
sns.histplot(data=df1,x='toss_winner',bins=3,kde=True)
plt.show()

sns.scatterplot(data=df,x='match_winner',y='toss_winner')
plt.show()

"""the data of toss winner and match winner is saturated

data visualization related to the features shown above
"""

# q5
plt.figure(figsize=(10,5))
sns.heatmap(df[num_cols].corr(),annot=True)
plt.show()

"""5.
from the given data it is understandable the toss winner even though not strongly postively correlated still it is 48% correlated.  That means winning the toss can lead to winning the match with a probability score of 48%.
While first innings score or second innings score is not that much correlated so we can neglect that. While it is understandable from the data,that chance of team2 winning(43%) is comparitively more tha team 1(35%).
"""

# for i  in
plt.figure(figsize=(15,5))
sns.boxplot(data=df)
plt.show()

"""6.On applying boxplot on the data it is evident that margin has got a lot of outliers while second innings,high score and first innings has got few outliers other than that all the columns has got no outliers present in them. It would be better to drop of the margin column since it has got a lot of outliers and the data is small so it is advisable it would be difficult to synthetically decide the data and also it does has got almost nill -ve correlation to the match_winner so it wont affect the final outcome that much. I would rather prefer to remove them and for the other columns based on the z score i would change the value to the median value of the column for better understanding of the data."""

df1.head()

df2=df1.copy()

df2.drop(['match_id','date'],axis=1,inplace=True)

#data mapping
# win_map={'Wickets':0,'Runs':1}
df2['won_by']=df2['won_by'].map(win_map)
# toss_map={'Field':0,"Bat":1}
df2['toss_decision']=df2['toss_decision'].map(toss_map)
df2['team1']=df2['team1'].map(my_dict)
df2['team2']=df2['team2'].map(my_dict)
df2['toss_winner']=df2['toss_winner'].map(my_dict)
df2['match_winner']=df2['match_winner'].map(my_dict)

df2.head()

df2['venue']=df2['venue'].str.split(',')

df2['venue'].value_counts().index.tolist()
venue_map=zip(df2)
 df['venue_id']= df2['venue'].map()

df2.head()

df2['player_wins']=np.where(df2['player_of_the_match']==df['best_bowling'],1,0)

df2['best_bowling_figure']=df2['best_bowling_figure'].str.split("--")

df2['wickets']=df2['best_bowling_figure'][:1]

df.value_counts('player_of_the_match').value_counts()





df.plot(df2['best_bowling_figure'][1])



df2['player_of_the_match'].value_counts()

"""7.in home matches team home team won the most.

8. from the data it is understandable that bowlers have won the man of the match as well as batters it depends on performance, the day bowler performed well took more wickets and conceded less runs has been awareded man of the match and also batter swho scored more runs got the award.

9. from the data it is understandable that match winning is more for team 2(43%) than team 1(35%). The man of the match award is given top the players who decided the fate of the match.The team who took the msot wicket in the second innings won most match(83%).Toss winner wins the match probabiltity 48%.
"""

df2.head()

df2.venue.unique().tolist()
map_={'Wankhede Stadium, Mumbai:'0,
 'Brabourne Stadium Mumbai':1,
 'Dr DY Patil Sports Academy, Mumbai':2,
 'Maharashtra Cricket Association Stadium,Pune':3,
 'Eden Gardens, Kolkata:'4,
 'Narendra Modi Stadium, Ahmedabad':5}













































