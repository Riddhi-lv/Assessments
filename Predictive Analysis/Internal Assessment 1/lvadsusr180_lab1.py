# -*- coding: utf-8 -*-
"""LVADSUSR180_lab1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d1XdxGnvILqTrtr01dZTQGXw8Akdr-1e
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection  import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

df=pd.read_csv(r'https://raw.githubusercontent.com/Deepsphere-AI/LVA-Batch5-Assessment/main/expenses.csv')

df.head()

df.isnull().sum()

df.shape

df.duplicated().sum()

df.drop_duplicates(inplace=True)

df.dtypes

df.info()

df.describe()



df.columns.tolist()

df.sex.value_counts()

sns.countplot(data=df,x='sex')
plt.show()

sns.countplot(data=df,x='children')



sns.countplot(data=df,x='smoker')

sns.countplot(data=df,x='region')

df1=df.copy()

# encoding the categorical data
df=pd.get_dummies(data=df,columns=['sex','smoker','region'],drop_first=True,dtype='int')

df.shape

df.head()



sns.kdeplot(data=df,x='bmi')

cat_cols=
for i in df.columns.tolist():
        sns.coun

#filling null values for the bmi with the median since the data is normall distributed
df['bmi']=df['bmi'].fillna(df['bmi'].median())

for i in df.columns.tolist():
        sns.boxplot(data=df,x=i)
        plt.show()

"""only in bmi of the x variables there is outliers present  and also in the upper range it is present  since the dataset size is small so the data imputation is the only strategy.

---


"""

q3_bmi=df['bmi'].quantile(0.75)
q1_bmi=df['bmi'].quantile(0.25)
iqr=q3_bmi-q1_bmi

sns.boxplot(data=df[df['bmi']>q3_bmi+(0.5*q3_bmi)],x='bmi')

data=df[df['bmi']>q3_bmi+(0.5*q3_bmi)]

bmi_median=df['bmi'].median()
for i in data.index:
  print(df['bmi'][i])

data

building the linear regression model

# standard scaling
from sklearn.preprocessing import StandardScaler

ss=StandardScaler()

# scaling the data
df['bmi']=ss.fit_transform(df[['bmi']])

scaled_data

plt.figure(figsize=(8,5))
sns.heatmap(df.corr(),annot=True)
plt.show()

"""from the above correlation graph we can see that charges has a strong
 +ve relation with smoker_yes while with the regions it has very little to no relation
"""

X=df.drop('charges',axis=1)
y=df['charges']

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=20,shuffle=True)

X_train.shape,y_train.shape,X_test.shape,y_train.shape

model=LinearRegression()
model.fit(X_train,y_train)
pred=model.predict(X_test)

print(f"mean squared error:{mean_squared_error(y_test,pred)}")
print(f"root_mean squared error:{np.sqrt(mean_squared_error(y_test,pred))}")



