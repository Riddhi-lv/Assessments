# -*- coding: utf-8 -*-
"""lvadsusr180_wine_classification_lab1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11ryBmF18Lo3yYjdeuv5SAFHYQ-CkUmeQ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

from sklearn.metrics import r2_score,accuracy_score,precision_score,confusion_matrix,ConfusionMatrixDisplay

df=pd.read_csv(r'https://raw.githubusercontent.com/Deepsphere-AI/LVA-Batch5-Assessment/main/winequality-red.csv')

df.shape

df.isnull().sum()

df.duplicated().sum()

df.drop_duplicates(inplace=True)

df.shape

df.head()

df.quality.value_counts()

for i in df.columns.tolist():
  sns.boxplot(data=df,x=i)
  plt.show()

"""since random forest is insenstive to outliers no need to remove outliers

"""

# filling null values with median values
df=df.fillna(df.median())

for i in df.columns.tolist():
  sns.displot(data=df,x=i,kde=True)
  plt.show()

bins=[0,5,8]
label=['bad','good']
df['quality1']=pd.cut(df['quality'],bins=bins,labels=label)

df.head()

df['quality1']=df['quality1'].map({'bad':0,'good':1})

data=df.drop('quality',axis=1)
plt.figure(figsize=(10,8))
sns.heatmap(data.corr(),annot=True)
plt.show()

ss=StandardScaler()
scaled_data=ss.fit_transform(df.drop(['quality','quality1'],axis=1))

df.quality1.value_counts()

X=df.drop(['quality','quality1'],axis=1)
y=df['quality1']
X_train,X_test,y_train,y_test=train_test_split(X,y,shuffle=True,random_state=42,test_size=0.2)

X=scaled_data
y=df['quality1']
X_train,X_test,y_train,y_test=train_test_split(X,y,shuffle=True,random_state=42,test_size=0.25)

rf=RandomForestClassifier(n_estimators=200,random_state=42)
rf.fit(X_train,y_train)
pred=rf.predict(X_test)

print("accuracy_score:",accuracy_score(y_test,pred))
print("r2_score:",r2_score(y_test,pred))
print("precision_score:",precision_score(y_test,pred))

from sklearn.metrics import classification_report

classification_report(y_test,pred)

cm=confusion_matrix(y_test,pred)

ConfusionMatrixDisplay(cm).plot()
plt.show()



