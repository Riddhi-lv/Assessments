# -*- coding: utf-8 -*-
"""lvadsusr180 final assessment lab1 regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13iLAbs551SfJpox3tagtpxAjPc60p4TD
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor

from sklearn.preprocessing import StandardScaler

from sklearn.metrics import r2_score,mean_squared_error,mean_absolute_error

df=pd.read_csv(r'https://raw.githubusercontent.com/Deepsphere-AI/LVA-Batch5-Assessment/main/Fare%20prediction.csv')

df.shape

df.head()

df.isnull().sum()

df.passenger_count.value_counts()

df.dtypes

df.duplicated().sum()

df.drop(['key'],axis=1,inplace=True)

df['pickup_datetime']=df['pickup_datetime'].str.replace('UTC','')

df.head()

df['pickup_datetime']=pd.to_datetime(df['pickup_datetime'])

df.columns.tolist()

ss=StandardScaler()
cols=['pickup_longitude',
 'pickup_latitude',
 'dropoff_longitude',
 'dropoff_latitude']
scaled_value=ss.fit_transform(df[cols])

df1=pd.DataFrame(columns=cols,data=scaled_value)

data=pd.concat([df1,df[['passenger_count','fare_amount']]],axis=1)

data.head()

df[cols]=scaled_value

for i in cols:
  sns.boxplot(data=df,x=i)
  plt.show()



# handling outliers
# cols.append('passenger_count')
# cols.append('fare_amount')
data=df[cols]
q1=data.quantile(0.25)
q3=data.quantile(0.75)
threshold=1.5
iqr=(q3+q3*threshold)-(q1-q1*threshold)

# removing outliers
data=data[data>q1-q1*threshold]
data=data[data<q3+q3*threshold]

for i in cols:
  sns.displot(data=data,x=i,kde=True)
  plt.show()

sns.heatmap(data.corr(),annot=True)
plt.show()

X=data.drop('fare_amount',axis=1)
y=data['fare_amount']
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42,shuffle=True)

# building the model Linear Regression
lr=LinearRegression()
lr.fit(X_train,y_train)
pred=lr.predict(X_test)

print(f"mean sqaured_error:{mean_squared_error(y_test,pred)}")
print(f"root_mean sqaured_error:{np.sqrt(mean_squared_error(y_test,pred))}")
print(f"r2_score:{r2_score(y_test,pred)}")

rf=RandomForestRegressor()
rf.fit(X_train,y_train)
pred_rf=rf.predict(X_test)

print(f"mean sqaured_error:{mean_squared_error(y_test,pred_rf)}")
print(f"root_mean sqaured_error:{np.sqrt(mean_squared_error(y_test,pred_rf))}")
print(f"r2_score:{r2_score(y_test,pred_rf)}")