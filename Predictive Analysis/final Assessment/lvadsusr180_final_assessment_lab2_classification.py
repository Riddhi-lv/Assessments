# -*- coding: utf-8 -*-
"""lvadsusr180 final assessment lab2_classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aUjsXyHNpcExbIa_JDEhPYWwRKFVGOu9
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix,ConfusionMatrixDisplay,recall_score,accuracy_score,precision_score



from sklearn.preprocessing import LabelEncoder

df=pd.read_csv(r'https://raw.githubusercontent.com/Deepsphere-AI/LVA-Batch5-Assessment/main/penguins_classification.csv')

df.head()

df.columns.tolist()

df.isnull().sum()

df.shape

df.duplicated().sum()

cat_cols=df.select_dtypes(exclude='number').columns.tolist()

for i in cat_cols:
  print(df[i].value_counts())

from sklearn.preprocessing import OneHotEncoder

ohe=OneHotEncoder(drop='first',dtype='int32')

one_hot_data=ohe.fit_transform(df[['island']])
feature_names=ohe.get_feature_names_out()
df.drop('island',axis=1,inplace=True)
df[feature_names]=one_hot_data.toarray()

df.head()

df.species.value_counts()

df['species']=df['species'].map({'Adelie':1,'Gentoo':0})

feature_names.tolist()





df.isnull().sum()

num_cols=[set(df.columns.tolist())-set(cat_cols)]

num_cols

for i in feature_names.tolist():
  sns.countplot(data=df,x=i)
  plt.show()

for i in df.columns.tolist():
    sns.boxplot(data=df,x=i)
    plt.show()

# oultliers is very little so it can be ignored

# filling missing values
df.fillna(df.mean(),inplace=True)

df.year=df.year.map({2007:1,2008:2,2009:3})

df.head()

cols=['bill_length_mm','bill_depth_mm','flipper_length_mm','body_mass_g']
ss=StandardScaler()
scaled_value=ss.fit_transform(df[cols])

df1=pd.DataFrame(columns=cols,data=scaled_value)

df.drop(cols,axis=1,inplace=True)

data=pd.concat([df1,df],axis=1)

X=data.drop('species',axis=1)
y=data['species']
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42,shuffle=True)

lr=LogisticRegression()
lr.fit(X_train,y_train)
pred=lr.predict(X_test)



print(f"accuracy_score:{accuracy_score(y_test,pred)}")
print(f"precision_score:{precision_score(y_test,pred)}")
print(f"recall_score:{recall_score(y_test,pred)}")

cm=confusion_matrix(y_test,pred)
ConfusionMatrixDisplay(cm).plot()
plt.show()

rf=RandomForestClassifier()
rf.fit(X_train,y_train)
pred_rf=rf.predict(X_test)

print(f"accuracy_score:{accuracy_score(y_test,pred_rf)}")
print(f"precision_score:{precision_score(y_test,pred_rf)}")
print(f"recall_score:{recall_score(y_test,pred_rf)}")

cm=confusion_matrix(y_test,pred_rf)
ConfusionMatrixDisplay(cm).plot()
plt.show()

